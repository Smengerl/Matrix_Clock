substitutions:
  clk_pin: GPIO5
  mosi_pin: GPIO23
  cs_pin: GPIO21
  num_chips: "4"


# Use ESP IDF framework
esp32:
  board: esp32dev
  framework:
    type: esp-idf

# Enable logging
logger:
  level: VERBOSE

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
  - platform: esphome
    password: "3f6786b29f445e0ac078c0bfec10c81d"


# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

# Allow provisioning Wi-Fi via serial
#improv_serial:

#dashboard_import:
#  package_import_url: github://esphome/example-configs/esphome-web/esp32.yaml@main
#  import_full_config: true


# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
#esp32_improv:
#  authorizer: none

# To have a "next url" for improv serial
#web_server:
#  port: 80
#  version: 3



# Configure LED Matrix Pinout
spi:
  clk_pin: $clk_pin
  mosi_pin: $mosi_pin

# time:
#  - platform: homeassistant
#    id: hass_time

#image:
#  - file: "smile.png"
#    id: my_image




# Setup Wifi
wifi:
  id: wifi_id
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  on_connect:
    then:
      - lambda: |-
          ESP_LOGI("$TAG", "WiFi Connect");
          id(trigger_rendering).execute();
  on_disconnect:
    then:
      - lambda: |-
          ESP_LOGI("$TAG", "WiFi Disconnect");
          id(trigger_rendering).execute();

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "LED Matrix Fallback Hotspot"
    password: "238asdqvasd3t4d"



